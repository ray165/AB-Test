trend %% 12 == 0, # T: wrong number for December just by %/% 12 + 1
trend %/% 12,
trend %/% 12 + 1
)
) %>%
# T: remove trend and pc_id
select(-trend, -pc_id)
View(data)
data <- data %>%
mutate(
# T: mutate dummy variables
cd = 1 * (cd == "yes"),
multi =  1 * (multi == "yes"),
premium = 1 * (premium == "yes"),
# T: separate trend
month = ifelse(
trend %% 12 == 0, # T: wrong number for December just by %% 12
12,
trend %% 12
),
year = ifelse(
trend %% 12 == 0, # T: wrong number for December just by %/% 12 + 1
trend %/% 12,
trend %/% 12 + 1
)
)
select(data, -trend, -pc_id)
data = drop_columns(cpu,c("pc_id","trend"))
library(DataExplorer)
data = drop_columns(cpu,c("pc_id","trend"))
data = drop_columns(data,c("pc_id","trend"))
mregr_all  = lm(data= data, formula = price ~.)
summary(mregr_all)
library(leaps)  #subets selection
library(car)
leap = regsubsets(data = data, price ~.)
summary(leap)
plot(data= data, y= price, x = year)
summary(mregr_all)
plot(x= year, y= price, data = data)
View(data)
plot(data$year, data$price)
df=  c("5", "twenty", "sdfsd")
df=  as.dataframe(c("5", "twenty", "sdfsd"))
df=  tibble(c("234","345sdfd","234sf"))
library(tidyverse)
df=  tibble(c("234","345sdfd","234sf"))
df(,-c("234"))
df
df[,-1]
df
df[1]
df[1,]
df[,1]
df[,11]
df[,-1]
df = df[,-1]
df = df[-"234",]
df = df[-c("234"),]
df=  tibble(c("234","345sdfd","234sf"))
df[1,]
df[2,]
df[-2,]
library(tidyverse)
library(DataExplorer)
library(readr)
Computers <- read_csv("BUS 462/As1 Pricing Computers/Computers.csv")
View(Computers)
data = Computers
colnames(data)[1] <- "pc_id"
hist(data$price, freq = T)
table(data$price)
?table
hist(data$price, freq = T)
table(hist(data$price))
sort(table(data$price))
hist(data$price)
hist(data$price, freq = F)
transform(table(data$price))
sort(transform(table(data$price)))
transform(table(data$price))
bins = seq(900,5000, by=500)
hist(data$price, breaks = bins)
bins = seq(900,5500, by=500)
range(data$price)
hist(data$price, breaks = bins)
histdf =hist(data$price, breaks = bins)
transform(histdf$counts)
transform(bins ,histdf$counts)
bins
as.data.frame(table(cut(data$price, breaks=seq(900,5500, by=500))))
as.data.frame(table(cut(data$price, breaks=seq(500,5500, by=500))))
table(cut(data$price, breaks=seq(900,5500, by=500)))
as.data.frame(table(cut(data$price, breaks=seq(500,5500, by=500), dig.lab = 4)))
library(tidyverse)
library(readr)
Computers <- read_csv("BUS 462/As1 Pricing Computers/Computers.csv")
View(Computers)
data = Computers
colnames(data)[1] <- "pc_id"
# T: I think you don't need a function for month and year
# T: and you should keep it numeric, no reason for a factor
data <- data %>%
mutate(
# T: mutate dummy variables
cd = 1 * (cd == "yes"),
multi =  1 * (multi == "yes"),
premium = 1 * (premium == "yes"),
# T: separate trend
month = ifelse(
trend %% 12 == 0, # T: wrong number for December just by %% 12
12,
trend %% 12
),
year = ifelse(
trend %% 12 == 0, # T: wrong number for December just by %/% 12 + 1
trend %/% 12,
trend %/% 12 + 1
)
) %>%
# T: remove trend and pc_id
select(-trend, -pc_id)
View(Computers)
View(data)
## Price time series month
myHistPrice = hist(data$price, breaks = c(500,5500))
hist(data$price)
?hist
plot(data$price ~ data$month)
library(readr)
Computers <- read_csv("BUS 462/As1 Pricing Computers/Computers.csv")
View(Computers)
library(tidyverse)
data = Computers
colnames(data)[1] <- "pc_id"
# T: I think you don't need a function for month and year
# T: and you should keep it numeric, no reason for a factor
data <- data %>%
mutate(
# T: mutate dummy variables
cd = 1 * (cd == "yes"),
multi =  1 * (multi == "yes"),
premium = 1 * (premium == "yes"),
# T: separate trend
month = ifelse(
trend %% 12 == 0, # T: wrong number for December just by %% 12
12,
trend %% 12
),
year = ifelse(
trend %% 12 == 0, # T: wrong number for December just by %/% 12 + 1
trend %/% 12,
trend %/% 12 + 1
)
) %>%
# T: remove trend and pc_id
select(-trend, -pc_id)
time_series <- data.frame(
month = 1:35
) %>% bind_cols(
data %>%
group_by(year, month) %>%
summarise(avg_price = mean(price)) %>%
ungroup() %>%
dplyr::select(avg_price)
)
time_series
plot(time_series$avg_price ~time_series$month)
?plot
plot(time_series$avg_price ~time_series$month, type = "b")
time_series
fit_multiple <- lm(data = data,
formula = price ~.)
plot(fit_multiple)
library(tidyverse)
library(readr)
Computers <- read_csv("BUS 462/As1 Pricing Computers/Computers.csv")
View(Computers)
data = Computers
colnames(data)[1] <- "pc_id"
# T: I think you don't need a function for month and year
# T: and you should keep it numeric, no reason for a factor
data <- data %>%
mutate(
# T: mutate dummy variables
cd = 1 * (cd == "yes"),
multi =  1 * (multi == "yes"),
premium = 1 * (premium == "yes"),
# T: separate trend
month = ifelse(
trend %% 12 == 0, # T: wrong number for December just by %% 12
12,
trend %% 12
),
year = ifelse(
trend %% 12 == 0, # T: wrong number for December just by %/% 12 + 1
trend %/% 12,
trend %/% 12 + 1
)
) %>%
# T: remove trend and pc_id
select(-trend, -pc_id)
library(forecast)
## Time series, plot by months, show different year lines
ggplot(data, aes(x = month, y= price, colour = "gold")) +
geom_point() +
geom_smooth(method ='lm')
## Time series, plot by months, show different year lines
ggplot(data, aes(x = month, y= mean(price), colour = "gold")) +
geom_point() +
geom_smooth(method ='lm')
## Time series, plot by months, show different year lines
ggplot(data, aes(x = month, y= mean(price), colour = "gold"))
## Time series, plot by months, show different year lines
ggplot(data, aes(x = as.factor(month), y= mean(price), colour = "gold"))
## Time series, plot by months, show different year lines
ggplot(data, aes(x = as.factor(month), y= price, colour = "gold"))
## Time series, plot by months, show different year lines
ggplot(data, aes(x = as.factor(month), y= mean(price ~ month), colour = "gold"))
## Time series, plot by months, show different year lines
ggplot(data, aes(x = as.factor(month), y= mean(price), colour = "gold"))
## Time series, plot by months, show different year lines
t_series_m = data %>%
group_by(year, month)
## Time series, plot by months, show different year lines
t_series_m = data %>%
group_by(year, month) %>%
summarise(avg_price = mean(price)) %>%
ungroup() %>%
dplyr::select(avg_price)
View(t_series_m)
## Time series, plot by months, show different year lines
t_series_m = data %>%
group_by(year, month) %>%
summarise(avg_price = mean(price)) %>%
dplyr::select(avg_price)
View(t_series_m)
?select
## Time series, plot by months, show different year lines
t_series_m = data %>%
group_by(year, month) %>%
summarise(avg_price = mean(price), month)
## Time series, plot by months, show different year lines
t_series_m = data %>%
group_by(year, month) %>%
summarise(avg_price = mean(price))
View(t_series_m)
names(t_series_m)
ggplot(t_series_m, aes(x= month, y = avg_price))+
geom_line(aes(color = 'gold'), size =2)
## Time series, plot by months, show different year lines
t_series_m = data %>%
group_by(year, as.factor(month)) %>%
summarise(avg_price = mean(price))
View(t_series_m)
## Time series, plot by months, show different year lines
t_series_m = data %>%
group_by(year, month = as.factor(month)) %>%
summarise(avg_price = mean(price))
View(t_series_m)
ggplot(t_series_m, aes(x= month, y = avg_price))+
geom_line(aes(color = 'gold'), size =2)
ggplot(t_series_m, aes(x= as.numeric(month), y = avg_price))+
geom_line(aes(color = 'gold'), size =2)
plot(t_series_m$avg_price ~ t_series_m$month)
load("~/BUS 462/as3 classification/.RData")
str(hr)
tweets.df <- do.call("rbind", lapply(tweets, as.data.frame))
str(hr$JobSatisfaction)
summary(hr)
library(tidyverse)
library(readr)
# A library page has a three main buttons available to customers, 'FIND', 'REQUEST', and 'INTERACT'. There's a problem where interact is only used by customers 2% of the time. To identify a better alternative to interact, an AB test is done with four different variants: Connect, Learn, Help, and Services.
# -- Data Load -------
setwd("~/Kaggle Competitions/Automating Boring Stuff/AB Test")
# -- EDA (Exploratory Data Analysis) --------
# Three Questions to solve
# 0. create a df with summarizing all variants together
# 1. How does each variant compare to 'Interact' in terms of clicks --> boxplot
# 2. Relative rank amongst its own dataset
# 3. Turn clicks to click through rate --> need total clicks
# summary = df_interact %>%
#   filter(grepl("^interact", Name, ignore.case =  TRUE)) %>%
#   select(`No. clicks`) %>%
#   mutate(Name = "Interact")
v_names = c('INTERACT', 'CONNECT', 'HELP','LEARN', 'SERVICES')
# https://stackoverflow.com/questions/17499013/how-do-i-make-a-list-of-data-frames
temp = list.files(pattern="*.csv")
myfiles = lapply(temp, read.csv)
names(myfiles) <- gsub(".*[-]([^.]+)[,].*", "\\1", temp) %>%
gsub("[[:space:]]", "",.)
# Functions: lower and upper confidence intervals of clickthrough rates to be passed to Summary
lowCI = function(click_through_rate, total_clicks) {
click_through_rate - (qt(0.975, df = total_clicks - 1) * sd(click_through_rate)/ sqrt(total_clicks))
}
upperCI = function(click_through_rate, total_clicks) {
click_through_rate + (qt(0.975, df = total_clicks - 1) * sd(click_through_rate)/ sqrt(total_clicks))
}
# Summary of all variations from the list of dfs
# Columns include: Version, Clicks, Total Clicks for the Test, Low CI, Upper CI, and Method (Control/Variation)
summary = myfiles %>%
lapply(., function(x) x[x[,grep("Name", names(x))]%in% v_names,] ) %>%
bind_rows(., .id = "version") %>%
select(., version, clicks = `No..clicks`) %>%
mutate(total_clicks = lapply(myfiles, function(x) sum(x$`No..clicks`))) %>%
mutate(total_clicks = as.numeric(total_clicks)) %>%
mutate(.,click_through_rate = (clicks/total_clicks)) %>%
mutate(., low_ci = lowCI(click_through_rate, total_clicks)) %>%
mutate(., upper_ci =  upperCI(click_through_rate, total_clicks)) %>%
mutate( method = ifelse(version == 'Interact', 'Control', 'Variation'))
View(summary)
# -- Pot the Summary -----
ggplot(data = summary, aes(version, click_through_rate, color = method)) +
geom_point() +
geom_errorbar(aes(ymin = low_ci, ymax = uppper_ci)) +
xlab("Tested Version") +
ylab("Click through rate") +
ggtitle("Control vs Variation tests")
# -- Pot the Summary -----
ggplot(data = summary, aes(version, click_through_rate, color = method)) +
geom_point() +
geom_errorbar(aes(ymin = low_ci, ymax = upper_ci)) +
xlab("Tested Version") +
ylab("Click through rate") +
ggtitle("Control vs Variation tests")
# -- Pot the Summary -----
ggplot(data = summary, aes(version, click_through_rate, color = method)) +
geom_point() +
geom_errorbar(aes(ymin = low_ci, ymax = upper_ci)) +
xlab("Tested Version") +
ylab("Click through rate") +
ggtitle("Control vs Variation tests") +
theme_classic()
# -- Pot the Summary -----
ggplot(data = summary, aes(version, click_through_rate, color = method)) +
geom_point() +
geom_errorbar(aes(ymin = low_ci, ymax = upper_ci)) +
xlab("Tested Version") +
ylab("Click through rate") +
ggtitle("Control vs Variation tests") +
theme_linedraw()
# -- Pot the Summary -----
ggplot(data = summary, aes(version, click_through_rate, color = method)) +
geom_point() +
geom_errorbar(aes(ymin = low_ci, ymax = upper_ci)) +
xlab("Tested Version") +
ylab("Click through rate") +
ggtitle("Control vs Variation tests") +
theme_minimal()
library(forcats)
# -- Pot the Summary -----
ggplot(data = summary, aes(fct_reorder(version, click_through_rate), click_through_rate, color = method)) +
geom_point() +
geom_errorbar(aes(ymin = low_ci, ymax = upper_ci)) +
xlab("Tested Version") +
ylab("Click through rate") +
ggtitle("Control vs Variation tests") +
theme_minimal()
print("hello")
summary$version$interact
summary$version$['interact',]
summary$version$['interact']
summary$version['interact']
summary$version['interact',]
summary[summary$version = 'interact', ]
summary[summary$version = 'Interact', ]
summary[version = 'Interact', ]
summary[1, version]
class(summary)
summary[1]
summary[version, 1]
summary[1, 1]
summary$version[1]
filter(summary) %>%
select(clicks)
summary[1,3]
summary[1,2]
summary$clicks[1]
summary$total_clicks[1]
ab_test = summary %>%
filter(version != "Interact") %>%
mutate(pval = prop.test(x = c(summary$clicks[1], lead(clicks)),
n = c(summary$total_clicks[1], lead(total_clicks))
)
)
ab_test = summary %>%
filter(version != "Interact") %>%
mutate(pval = prop.test(x = c(summary$clicks[1], lead(clicks)),
n = c(summary$total_clicks[1], lead(total_clicks))
)$p.value
)
ab_test
ab_test = summary %>%
filter(version != "Interact") %>%
mutate(pval = prop.test(x = c(summary$clicks[1], clicks),
n = c(summary$total_clicks[1], total_clicks)
)$p.value
)
ab_test
prop.test(300, 1501)
prop.test(300, 1501)$p.value
lm(data = summary, total_clicks ~ clicks)
test = lm(data = summary, total_clicks ~ clicks)
test$coefficients
test = lm(data = summary, total_clicks ~ clicks)$coefficients
test
test = 0
test = lm(data = summary, total_clicks ~ clicks)$coefficients
test = 0
test = lm(data = summary, total_clicks ~ clicks)$coefficients
test
t.df = tibble(x = 1:5, y = 1:5)
t.df
t.df = tibble(x = 1:5, y = 5:10)
t.df = tibble(x = 1:5, y = 1:5)
t.df %>%
mutate(new_y = t.df[1] + lead(x))
t.df %>% as.data.frame(t.df)
mutate(addition = t.df$x[1] + lead(x))
t.df$x[1]
t.df$x[2]
mutate(addition = t.df$x[1] + lead(t.df$x))
mutate(data = t.df,addition = t.df$x[1] + lead(x))
mutate(data = t.df,addition = t.df$x[1] + lead(x= x))
t.df %>% as.data.frame(t.df)
mutate(data = t.df, addition = t.df$x[1] + lead(x= y))
mutate(data = t.df, addition = t.df$x[1] + lead(x= tf.df$y))
r = mutate(t.df, addition = t.df$x[1] + lead(x= tf.df$y))
r = mutate(t.df, addition = t.df$x[1] + lead(x= t.df$y))
r
r = mutate(t.df, addition = 10 + lead(x= t.df$y))
r
r = mutate(t.df, addition = 10 + y)
r
summary$total_clicks
summary$total_clicks[1]
m  = prop.test(x = c(summary$clicks[1], summary$clicks[2]),
n = c(summary$total_clicks[1], summary$total_clicks[2])
)$p.value
m
m  = prop.test(x = c(summary$clicks[1], summary$clicks[4]),
n = c(summary$total_clicks[1], summary$total_clicks[4])
)$p.value
m
m  = prop.test(x = c(summary$clicks[1], summary$clicks[5]),
n = c(summary$total_clicks[1], summary$total_clicks[5])
)$p.value
m
ab_test = NULl
ab_test = NULL
ab_test = summary %>%
filter(version != "Interact") %>%
mutate(.,pval = prop.test(x = c(summary$clicks[1], clicks),
n = c(summary$total_clicks[1], total_clicks)
)$p.value
)
ab_test
ab_test = summary %>%
filter(version != "Interact") %>%
mutate(pval = prop.test(x = c(summary$clicks[1], clicks),
n = c(summary$total_clicks[1], total_clicks)
)$p.value
)
ab_test
ab_test = summary %>%
filter(version != "Interact") %>%
rowwise() %>%
mutate(pval = prop.test(x = c(summary$clicks[1], clicks),
n = c(summary$total_clicks[1], total_clicks)
)$p.value
)
ab_test
ab_test = summary %>%
filter(version != "Interact") %>%
rowwise() %>%
mutate(pval = prop.test(x = c(summary$clicks[1], clicks),
n = c(summary$total_clicks[1], total_clicks)
)$p.value) %>%
as.data.frame()
ab_test
ab_test = summary %>%
filter(version != "Interact") %>%
rowwise() %>%
#Basically have Interact's clicks/ total clicks inputted into prop.test for all variations of the AB test
mutate(pval = prop.test(x = c(summary$clicks[1], clicks),
n = c(summary$total_clicks[1], total_clicks)
)$p.value) %>%
mutate(adj_pval = p.adjust(pval, method = "bonferroni")) %>%
as.data.frame()
ab_test
ab_test = summary %>%
filter(version != "Interact") %>%
rowwise() %>%
#Basically have Interact's clicks/ total clicks inputted into prop.test for all variations of the AB test
mutate(pval = prop.test(x = c(summary$clicks[1], clicks),
n = c(summary$total_clicks[1], total_clicks)
)$p.value) %>%
ungroup() %>%
mutate(adj_pval = p.adjust(pval, method = "bonferroni")) %>%
as.data.frame()
ab_test
# Filter Adjusted p-values by 0.05
top_variants = ab_test %>%
filter(adj_pval <= 0.05)
# -- Plot Top Variants -----
ggplot(data = top_variants, aes(x = adj_pval, y = click_through_rate, color = version)) +
geom_point()
# Filter Adjusted p-values by 0.05
top_variants = ab_test %>%
select(version, click_through_rate, pval, adj_pval) %>%
filter(adj_pval <= 0.05)
top_variants
